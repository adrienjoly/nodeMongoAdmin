var fs = require('fs');
var util = require('util');
var path = require('path');
var url = require('url');
var http = require('http');
var gogo = require('gogo');
var queryObj = require('querystring').parse;
var exec = require('child_process').exec;
var ServerResponse = require('http').ServerResponse;
var Cache = require('./Cache');

//==============================================================================
var Application = function(appDir, devMode) {

  http.Server.call(this, routeRequest);

  this.model = {};
  this.view = {};
  this.controller = {};
  this.db = null;
  this.cache = null;

  this._publicDir = appDir + '/public';
  this._modelDir = appDir + '/app/model';
  this._viewDir = appDir + '/app/view';
  this._controllerDir = appDir + '/app/controller';
  this._viewGenDir = appDir + '/private/generated/view';

  this._configServerFile = appDir + '/config/server.yml';
  this._configRouterFile = appDir + '/config/router.yml';
  this._configDbFile = appDir + '/config/database.yml';

  this._yamlScript = appDir + '/private/YAML.py';
  
  this._modelMTime = {};
  this._viewMTime = {};
  this._controllerMTime = {};  

  this._devMode = devMode;
  this._port = null;
  this._routes = null;
  
  updateModels(this);
  updateViews(this);
  updateControllers(this);

}

util.inherits(Application, http.Server);

//==============================================================================
Application.prototype.start = function() {
  var self = this;
  var wait = 3;
  var launchServerWhenReady = function() {
    if (!--wait)
      self.listen(self._port);
  }
  initServer(this, launchServerWhenReady);
  initRouter(this, launchServerWhenReady);
  initDb(this, launchServerWhenReady)
}

//==============================================================================
function routeRequest(request, response) {

  if (this._devMode) {
    updateModels(this);
    updateViews(this);
    updateControllers(this);
    updateRoutes(this);
  }

  var urlObj = url.parse(request.url, true);
  var path = urlObj.pathname;
  var query = urlObj.query;
  var i, route, routeMatch, params, controller, view, model;

  for (i = 0; route = this._routes[i]; i++) {
    if ((routeMatch = path.match(route.urlPattern.regexp))) {
      params = getRouteParams(route, routeMatch, query);
      if (route.controller)
        route.controller.fun.call(this, request, response, params);
      else if (route.view)
        response.render(route.view.fun, params,
            get(this.model, route.view.path), this.db);
      else if (route.redirection)
        response.redirect(route.redirection.replace(PARAM_REGEXP,
          function(_, str) {
            return params[str.trim()];
          }
        ));
      return;
    }
  }

  path = path.split('/');
  if (path[path.length - 1] === '')
    path.pop();
  if (path[0] === '')
    path.shift();
  if (path.length === 0)
    path.push('index');

  if ((controller = get(this.controller, path)))
    controller.call(this, request, response, query);
  else if ((view = get(this.view, path)))
    response.render(view, query, get(this.model, path), this.db);
  else if ((model = get(this.model, path)))
    model(query, this.db, function($) {response.render($);});
  else
    response.renderFile(this._publicDir + urlObj.pathname, function() {
      response.render('error404');
    });

}

//==============================================================================
function updateControllers(self) {
  var files = getFiles(self._controllerDir);
  var pathArrays = [];
  var absolutePaths = [];
  var i, len, file, pathArray, absolutePath, mtime;
  for (i = 0; file = files[i]; i++) {
    if (path.extname(file.path) === '.js') {
      pathArray = file.path.substr(0, file.path.length - 3).split('/');
      mtime = get(self._controllerMTime, pathArray);
      if (!mtime || file.stat.mtime > mtime) {
        absolutePath = self._controllerDir + '/' + file.path;
        require.cache[absolutePath] = null;
        pathArrays.push(pathArray);
        absolutePaths.push(absolutePath);
        set(self._controllerMTime, pathArray, file.stat.mtime);
      }
    }
  }
  for (i = 0, len = pathArrays.length; i < len; i++)    
    set(self.controller, pathArrays[i], require(absolutePaths[i]).controller);
}

//==============================================================================
function updateViews(self) {
  var files = getFiles(self._viewDir);
  var pathArrays = [];
  var absolutePaths = [];
  var i, len, file, ext, pathArray, absolutePath, mtime, gen;
  for (i = 0; file = files[i]; i++) {
    ext = path.extname(file.path);
    if (ext === '.js' || ext === '.xml') {
      pathArray = file.path.substr(0, file.path.length - ext.length).split('/');
      mtime = get(self._viewMTime, pathArray);      
      if (!mtime || file.stat.mtime > mtime) {
        absolutePath = self._viewDir + '/' + file.path;
        if (ext === '.xml') {
          gen = self._viewGenDir + '/' + file.path.replace('/', '.') + '.js';
          generateView(absolutePath, gen);
          absolutePath = gen;
        }
        require.cache[absolutePath] = null;
        pathArrays.push(pathArray);
        absolutePaths.push(absolutePath);
        set(self._viewMTime, pathArray, file.stat.mtime);
      }
    }    
  }
  for (i = 0, len = pathArrays.length; i < len; i++)
    set(self.view, pathArrays[i], require(absolutePaths[i]).view);
}

//==============================================================================
function updateModels(self) {
  var files = getFiles(self._modelDir);
  var pathArrays = [];
  var absolutePaths = [];
  var i, len, file, pathArray, absolutePath, mtime;
  for (i = 0; file = files[i]; i++) {
    if (path.extname(file.path) === '.js') {
      pathArray = file.path.substr(0, file.path.length - 3).split('/');
      mtime = get(self._modelMTime, pathArray);
      if (!mtime || file.stat.mtime > mtime) {
        absolutePath = self._modelDir + '/' + file.path;
        require.cache[absolutePath] = null;
        pathArrays.push(pathArray);
        absolutePaths.push(absolutePath);
        set(self._modelMTime, pathArray, file.stat.mtime);
      }
    }
  }
  for (i = 0, len = pathArrays.length; i < len; i++)
    set(self.model, pathArrays[i], require(absolutePaths[i]).model);
}

//==============================================================================
function updateRoutes(self) {
  for (var i = 0, route; route = self._routes[i]; i++) {
    if (route.controller)
      route.controller.fun = get(self.controller, route.controller.path);
    else if (route.view)
      route.view.fun = get(self.view, route.view.path);
  }
}

//==============================================================================
function initServer(self, callback) {
  loadYaml(self, self._configServerFile, function(config) {
    if (!config)
      throw new Error('Invalid server config file');
    config = self._devMode ? config.development : config.production;
    self._port = config.port;
    if (config.cache)
      self.cache = new Cache(config.cache);
    callback();
  });
}

//==============================================================================
function initDb(self, callback) {
  if (path.existsSync(self._configDbFile)) {
    loadYaml(self, self._configDbFile, function(config) {
      if (!config || (!config.development && !config.production))
        throw new Error('Invalid DB config file');
      config = self._devMode ? config.development : config.production;
      gogo.open(config, function(db) {
        self.db = db;
        callback();
      });
    });
  } else {
    callback();
  }
}

//==============================================================================
function initRouter(self, callback) {
  if (path.existsSync(self._configRouterFile)) {
    loadYaml(self, self._configRouterFile, function(routes) { 
      if (!routes)
        throw new Error('Invalid router config file');
      self._routes = routes;
      for (var i = 0, len = self._routes.length; i < len; i++)
        normalizeRoute(self, routes[i]);
      callback();
    });  
  } else {
    callback();
  }  
}

//==============================================================================
function normalizeRoute(self, route) {

  var path, action;

  if (route.route) {
    path = route.to.split('.');
    action = path.shift();
    route.urlPattern = getUrlPattern(route.route);
    if (action === 'controller')
      route.controller = {path: path, fun: get(self.controller, path)};
    else if (action === 'view')
      route.view = {path: path, fun: get(self.view, path)};
    else
      throw new Error('invalid route');
    delete route.route;
  }

  if (route.redirect) {
    route.urlPattern = getUrlPattern(route.redirect);
    route.redirection = route.to;
    delete route.redirect;
  }

  if (route.urlPattern.params.length === 0 && !route.defaultParams
      && !route.constantParams && route.queryParams === undefined)
    route.queryParams = true;

  route.defaultParams || (route.defaultParams = {});

  delete route.to;

}

//==============================================================================
function set(obj, path, value) {
  var name = path[path.length - 1];
  for (var i = 0, len = path.length; i < len - 1; i++)
    obj = obj[path[i]] || (obj[path[i]] = {});
  obj[name] = value;
}

//==============================================================================
function get(obj, path) {
  var value = obj;
  for (var i = 0, len = path.length; i < len; i++) {
    value = value[path[i]];
    if (value === undefined)
      return null;
  }
  return value;
}

//==============================================================================
function getFiles(dir) {
  var dirStack = [dir];
  var prefixStack = [''];
  var files = [];
  var currentDir, currentPrefix, currentFiles, stat, i, len;
  while (dirStack.length > 0) {
    currentDir = dirStack.pop();
    currentPrefix = prefixStack.pop();
    currentFiles = fs.readdirSync(currentDir);
    for (i = 0, len = currentFiles.length; i < len; i++) {
      stat = fs.statSync(currentDir + '/' + currentFiles[i]);
      if (stat.isFile()) {
        files.push({path: currentPrefix + currentFiles[i], stat: stat});
      } else {
        dirStack.push(currentDir + '/' + currentFiles[i]);
        prefixStack.push(currentPrefix + currentFiles[i] + '/');
      }
    }
  }
  return files;
}

//==============================================================================
function getRouteParams(route, routeMatch, query) {

  var params = {};
  var i, x, signature;

  for (i = 0; signature = route.urlPattern.params[i]; i++)
    params[signature.name] = getParam(signature.type, routeMatch[i + 1]);

  if (route.queryParams === true) {
    for (x in query) { 
      params[x] = query[x];
    } 
  } else if (route.queryParams) {
    for (x in route.queryParams) {
      params[x] = query[x] === undefined ?
        route.defaultParams[x] :
        getParam(route.queryParams[x], query[x]);
    }
  }

  if (route.constantParams)
    for (x in route.constantParams)
      params[x] = route.constantParams[x];

  return params;

}

//==============================================================================
function getUrlPattern(str) {
  var urlPattern = {params: []};
  str = str.replace(/\(([^\(\)]+)\)(?!\s*\})/g, function(_, str) {
    return '(?:' + str + ')';
  });
  str = str.replace(/\{([^\{\}]+)\}/g, function(_, str) {
     if (/^([^:\s]+)\s*:\s*(string|number|int|boolean|array|array<int>|array<number>)/.test(str)) {
       urlPattern.params.push({name: RegExp.$1, type: TYPE_CODE[RegExp.$2]});
       return TYPE_REGEXP[RegExp.$2];
     }
     if (/^([^:\s]+)\s*:\s*(\([^\(\)]+\))/.test(str)) {
       urlPattern.params.push({name: RegExp.$1});
       return RegExp.$2;
     }
     urlPattern.params.push({name: str.trim()})
     return TYPE_REGEXP.string;
  });  
  urlPattern.regexp = new RegExp(str + '/?$');
  return urlPattern;
}

//==============================================================================
function getParam(type, value) {
  switch (type) {
    case 1:
      return parseInt(value);
    case 2:
      return parseFloat(value);
    case 3:
      return value !== '0' && value !== 'false';
    case 4:
      return value.split(',');
    case 5:
      return value.split(',').map(parseInt);
    case 6:
      return value.split(',').map(parseFloat);
    default:
      return value;
  }
}

//==============================================================================
ServerResponse.prototype.redirect = function(path) {
  this.writeHead(302, {Location: path});
  this.end();
}

//==============================================================================
ServerResponse.prototype.render = function(x, params, model, db) {
  if (typeof x === 'string') {
    this.renderText(x, params);
  } else if (typeof x === 'function') {
    if (typeof model === 'function') {
      var self = this;
      model(params, db, function(y) {
        self.renderHtml(x(y));
      });
    } else {
      this.renderHtml(x(params));
    }
  } else if (typeof x === 'object') {
    this.renderJson(x, params);
  } else {
    throw new Error('wrong render arguments');
  }
}

//==============================================================================
ServerResponse.prototype.renderText = function(text, encoding) {
  var len = typeof html === 'string' ? Buffer.byteLength(text) : text.length;
  this.setHeader('Content-Type', 'text/plain');
  this.setHeader('Content-Length', len);
  this.end(text, encoding);
}

//==============================================================================
ServerResponse.prototype.renderHtml = function(html, encoding) {
  var len = typeof html === 'string' ? Buffer.byteLength(html) : html.length;
  this.setHeader('Content-Type', 'text/html');
  this.setHeader('Content-Length', len);
  this.end(html, encoding);
}

//==============================================================================
ServerResponse.prototype.renderJson = function(obj, encoding) {
  var str = JSON.stringify(obj);
  this.setHeader('Content-Type', 'application/json');
  this.setHeader('Content-Length', Buffer.byteLength(str));
  this.end(str, encoding);
}

//==============================================================================
ServerResponse.prototype.renderFile = function(file, fileNotFoundHandler, cache) {

  var self = this;

  if (cache && (data = cache.get(file))) {
    if (!self.getHeader('Content-Type')) {
      var contentType = CONTENT_TYPE[path.extname(file)];
      if (contentType)
        self.setHeader('Content-Type', contentType);
    }
    self.setHeader('Transfer-Encoding', 'identity');
    self.setHeader('Content-Length', data.buffer.length);
    self.setHeader('Last-Modified', data.mtime.toGMTString());
    self.writeHead(200);
    self.end(data.buffer);
    return;
  }

  fs.stat(file, function(err, stat) {
    if (err) {
      fileNotFoundHandler ?
        fileNotFoundHandler.call(self, err) :
        self.end('Could not open file "' + path.basename(file) + '"');
      return;
    }
    if (stat.isFile()) {
      if (!self.getHeader('Content-Type')) {
        var contentType = CONTENT_TYPE[path.extname(file)];
        if (contentType)
          self.setHeader('Content-Type', contentType);
      }
      self.setHeader('Transfer-Encoding', 'identity');
      if (cache) {
        var data = cache.get(file);
        var lastModified = stat.mtime.toGMTString();
        if (data && data.mtime === stat.mtime.getTime()) {
          self.setHeader('Content-Length', data.buffer.length);
          self.setHeader('Last-Modified', lastModified);
          self.writeHead(200);
          self.end(data.buffer);
          return;
        } else {
          if (stat.size <= cache.maxBufferSize) {
            fs.readFile(file, function(err, buffer) {
              if (err) {
                fileNotFoundHandler ?
                  fileNotFoundHandler.call(self, err) :
                  self.end('Could not open file "' + path.basename(file) + '"');
              } else {
                cache.put(file, buffer, stat.mtime.getTime());
                self.setHeader('Content-Length', buffer.length);
                self.setHeader('Last-Modified', lastModified);
                self.writeHead(200);
                self.end(buffer);
              }
            });
            return;
          }
        }
      }
      self.setHeader('Content-Length', stat.size);
      self.setHeader('Last-Modified', new Date(stat.mtime).toGMTString());
      self.writeHead(200);
      fs.createReadStream(file).pipe(self);
    } else {
      file = (file.endsWith('/') ? file : (file + '/')) + 'index.html';
      self.renderFile(file, fileNotFoundHandler);
    }
  });
}

//==============================================================================
function loadYaml(self, file, callback) {
  exec('python ' + self._yamlScript + ' ' + file, function(err, stdout) {
    if (err) {
      callback(null);
    } else {
      var jsonObj = null;
      try {
        jsonObj = JSON.parse(stdout);
      } catch (e) {
        callback(null);
      }
      callback(jsonObj);
    }
  });
}


//==============================================================================
var DEFAULT_BUFFER_SIZE = 4096;

var PARAM_REGEXP = /\{([^\{\}]+)\}/g;

var TYPE_CODE = {
  'string': 0,
  'int': 1,
  'number': 1,
  'boolean': 2,
  'array': 3,
  'array<int>': 4,
  'array<number>': 4
};

var TYPE_REGEXP = {
  'string': '([^\\s/]+)',
  'int': '(\\d+)',
  'number': '(\\d+)',
  'boolean': '(true|false|0|1)',
  'array': '([^\\s/]+)',
  'array<int>': '([\\d,]+)',
  'array<number>': '([\\d,]+)'
};

var CONTENT_TYPE = {
  '.html': 'text/html',
  '.css': 'text/css',
  '.txt': 'text/plain',
  '.png': 'image/png',
  '.gif': 'image/gif',
  '.jpg': 'image/jpeg',
  '.bmp': 'image/bmp',
  '.ico': 'image/x-icon',
  '.webm': 'video/webm',
  '.ogv': 'video/ogg',
  '.mp4': 'video/mp4',
  '.xml': 'application/xml',
  '.js':  'application/x-javascript',
  '.swf': 'application/x-shockwave-flash'
};

var CHUNK_CONTENT = {
  '.png': 1,
  '.gif': 1,
  '.jpg': 1,
  '.bmp': 1,
  '.ico': 1,
  '.webm': 1,
  '.ogv': 1,
  '.mp4': 1,
  '.swf': 1
}

//==============================================================================
module.exports = function(appDir, devMode) {
  new Application(appDir, devMode).start();
}