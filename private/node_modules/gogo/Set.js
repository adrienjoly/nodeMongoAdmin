var QueryFuture = require('./QueryFuture').QueryFuture;

//==============================================================================
function Set(collection, query, options, pendingQueries) {

  this.collection = collection;
  this.query = query || {};  
  this.pendingQueries = pendingQueries;
  
  if (options) {
    var i, field;
    if (typeof options === 'number') {
      this.options = {limit: options};
    } else if (Array.isArray(options)) {
        this.fields = {};
        for (i = 0, field; field = options[i]; i++)
          this.fields[field] = 1;
    } else if (options) {
      if (options.fields) {
        if (Array.isArray(options.fields)) {
          this.fields = {};
          for (i = 0, field; field = options.fields[i]; i++)
            this.fields[field] = 1;
        } else {
          this.fields = options.fields;
        }
        delete options.fields;
      }
      this.options = options;
    }
  } else {
    this.options = {};
  }
  
}

//==============================================================================
Set.prototype.one = function(callback) {
  var queryFuture = new QueryFuture(callback);
  var handler = function(err, elt) {
    err ?
      queryFuture.notifyErrorHandlers(err) :
      queryFuture.notifyCallbacks(elt);    
  }
  if (this.fields) {
    if (this.collection)
      this.collection.findOne(this.query, this.fields, this.options, handler);
    else
      this.pendingQueries.push(
        [this.query, this.fields, this.options, handler, 'findOne']
      );
  } else {
    if (this.collection)
      this.collection.findOne(this.query, this.options, handler);
    else
      this.pendingQueries.push(
        [this.query, this.options, handler, 'findOne']
      );
  }
  return queryFuture;
}

//==============================================================================
Set.prototype.all = function(callback) {
  var queryFuture = new QueryFuture(callback);
  var handler = function(err, cursor) {
    if (err) {
      queryFuture.notifyErrorHandlers(err);
    } else {
      cursor.toArray(function(err, elts) {
        err ?
          queryFuture.notifyErrorHandlers(err) :
          queryFuture.notifyCallbacks(elts);        
      });
    }
  }
  if (this.fields) {
    if (this.collection)
      this.collection.find(this.query, this.fields, this.options, handler);
    else
      this.pendingQueries.push(
        [this.query, this.fields, this.options, handler, 'find']
      );
  } else {
    if (this.collection)
      this.collection.find(this.query, this.options, handler);
    else
      this.pendingQueries.push(
        [this.query, this.options, handler, 'find']
      );
  }
  return queryFuture;
}

//==============================================================================
Set.prototype.each = function(action, callback) {
  var queryFuture = new QueryFuture(callback);
  var handler = function(err, cursor) {
    if (err) {
      queryFuture.notifyErrorHandlers(err);
    } else {
      cursor.each(function(err, elt) {
        if (err) {
          queryFuture.notifyErrorHandlers(err);
        } else {
          elt ?
            action(elt) :
            queryFuture.notifyCallbacks();
        }
      });
    }
  }
  if (this.fields) {
    if (this.collection)
      this.collection.find(this.query, this.fields, this.options, handler);
    else
      this.pendingQueries.push(
        [this.query, this.fields, this.options, handler, 'find']
      );
  } else {
    if (this.collection)
      this.collection.find(this.query, this.options, handler);
    else
      this.pendingQueries.push(
        [this.query, this.options, handler, 'find']
      );
  }
  return queryFuture;
}

//==============================================================================
Set.prototype.update = function(updateObj, options, callback) {
  if (callback !== false) {
    var queryFuture = new QueryFuture(callback);
    var handler = function(err) {
      err ?
        queryFuture.notifyErrorHandlers(err) :
        queryFuture.notifyCallbacks();      
    }
  }
  options = options || {};
  if (handler) {
    options.safe = true;
  }
  if (this.collection) {
    handler ?
      this.collection.update(this.query, updateObj, options, handler) :
      this.collection.update(this.query, updateObj, options);
  } else {
    this.pendingQueries.push(handler ?
      [this.query, updateObj, options, handler, 'update'] :
      [this.query, updateObj, options, 'update']
    );
  }
  return queryFuture;
}

//==============================================================================
Set.prototype.inc = function(incObj, callback) {
  return this.update({$inc: incObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.set = function(setObj, callback) {
  return this.update({$set: setObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.unset = function(unsetObj, callback) {
  return this.update({$unset: unsetObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.push = function(pushObj, callback) {
  return this.update({$push: pushObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.pushAll = function(pushAllObj, callback) {
  return this.update({$pushAll: pushAllObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.addToSet = function(addToSetObj, callback) {
  return this.update({$addToSet: addToSetObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.pop = function(popObj, callback) {
  return this.update({$pop: popObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.pull = function(pullObj, callback) {
  return this.update({$pull: pullObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.pullAll = function(pullAllObj, callback) {
  return this.update({$pullAll: pullAllObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.rename = function(renameObj, callback) {
  return this.update({$rename: renameObj}, {upsert: false, multi: false}, callback);
}

Set.prototype.bit = function(bitObj, callback) {
  return this.update({$bit: bitObj}, {upsert: false, multi: false}, callback);
}

//==============================================================================
Set.prototype.multiInc = function(incObj, callback) {
  return this.update({$inc: incObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiSet = function(setObj, callback) {
  return this.update({$set: setObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiUnset = function(unsetObj, callback) {
  return this.update({$unset: unsetObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiPush = function(pushObj, callback) {
  return this.update({$push: pushObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiPushAll = function(pushAllObj, callback) {
  return this.update({$pushAll: pushAllObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiAddToSet = function(addToSetObj, callback) {
  return this.update({$addToSet: addToSetObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiPop = function(popObj, callback) {
  return this.update({$pop: popObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiPull = function(pullObj, callback) {
  return this.update({$pull: pullObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiPullAll = function(pullAllObj, callback) {
  return this.update({$pullAll: pullAllObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiRename = function(renameObj, callback) {
  return this.update({$rename: renameObj}, {upsert: false, multi: true}, callback);
}

Set.prototype.multiBit = function(bitObj, callback) {
  return this.update({$bit: bitObj}, {upsert: false, multi: true}, callback);
}

//==============================================================================
exports.Set = Set;