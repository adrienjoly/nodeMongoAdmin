function RequestFuture(callback) {
  this.callbacks = [];
  this.errorHandlers = [];
  this.ready = false;
  this.arg = null;
  this.waitArgs = null;
  if (typeof callback === 'function')
    this.callbacks.push(callback);  
}

RequestFuture.prototype.callback = function(callback) {
  this.callbacks.push(callback);
}

RequestFuture.prototype.errorHandler = function(errorHandler) {
  this.errorHandlers.push(errorHandler);
}

RequestFuture.prototype.notifyCallbacks = function(arg) {
  var len = this.callbacks.length;
  var i, callback, args;
  for (i = 0; i < len; i++) {
    callback = this.callbacks[i];
    if (typeof callback === 'function') {
      if (this.waitArgs) {
        args = [arg];
        Array.prototype.push.apply(args, this.waitArgs);
        callback.apply(null, args);
      } else {
        callback(arg);
      }
    } else {
      callback.wait.value--;
      callback.arg[callback.i] = arg;
      if (!callback.wait.value)
        callback.run.apply(null, callback.arg);
    }
  }
  this.arg = arg;
  this.ready = true;
}

RequestFuture.prototype.notifyErrorHandlers = function(err) {
  for (var i = 0; i < this.errorHandlers.length; i++)
    this.errorHandlers[i](err);
}

module.exports = RequestFuture;