var mongodb = require('mongodb');
var Collection = require('./Collection');

//==============================================================================
exports.open = function(db, collections) {
  
  var DB = function() {
    var wait = {value: 0};
    var arg = [];
    var future, futures, len, callback, i;
    if (Array.isArray(arguments[0])) {
      futures = arguments[0];
      len = futures.length;
      callback = arguments[1];
    } else {
      futures = arguments;
      len = arguments.length - 1;
      callback = arguments[len];
    }
    for (i = 0; i < len; i++) {
      future = futures[i];
      if (future.ready) {
        arg[i] = future.arg;
      } else {
        wait.value++;
        future.callback({run: callback, i: i, wait: wait, arg: arg});
      }
    }
    if (!wait.value)
      callback.apply(null, arg);
  }

  if (typeof db === 'object')
    db = 'mongodb://' 
       + (db.user && db.password ? db.user + ':' + db.password + '@' : '')
       + (db.host || 'localhost') + ':' + (db.port || 27017) + '/'
       + (db.database || db.db || '');  

  if (!db.match(/^mongo(?:db)?:\/\//))
    db = 'mongodb://localhost/' + db;  

  if (typeof collections === 'function') {
    var callback = collections;
    mongodb.connect(db, function(err, db) {
      if (err) throw err;
      db.collectionNames(function(err, collections) {
        if (err) throw err;
        var i, collection, name;
        for (i = 0; collection = collections[i]; i++) {
          name = collection.name.split('.');
          name.shift();
          name = name.join('.');
          DB[name] = new Collection(name, db);
        }
        callback(DB);
      });
    });
    return null;
  }

  for (var i = 0; i < collections.length; i++)
    DB[collections[i]] = new Collection(collections[i]);

  mongodb.connect(db, function(err, db) {
    if (err) throw err;
    for (var i = 0, collection; collection = collections[i]; i++) {
      DB[collection].db = db;
      if (DB[collection].pendingRequests.length > 0)
        DB[collection].init();
    }
  });

  return DB;

}