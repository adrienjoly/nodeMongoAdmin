#!/usr/bin/env node

var fs = require('fs');
var sys = require('sys');
var path = require('path');
var daemon = require('./private/node_modules/daemon/lib/daemon');
var exec = require('child_process').exec;
var minimax = require('./private/node_modules/minimax');

var appDir = path.dirname(process.argv[1]);
var daemonName = path.basename(process.argv[1]);
var logFile = 'log/' + daemonName + '.out';
var pidFile = 'private/tmp/' + daemonName + '.pid';
var startTimeFile = 'private/tmp/' + daemonName + '.start';
var pid, startTime;

try {
  pid = fs.readFileSync(pidFile, 'utf8');
  startTime = parseInt(fs.readFileSync(startTimeFile, 'utf8'));
  if (startTime)
    startTime = new Date(startTime)
} catch (e) {}


//==============================================================================
function startDaemon() {  
  if (pid) {
    isProcessRunning(pid, function(isRunning) {
      if (isRunning) {
        console.log('\033[32m' + daemonName + '\033[0m could not be started because the daemon is already running');
      } else {
        minimax(appDir, argv[3] !== '--prod');
        daemonize();
      }
    });
  } else {
    minimax(appDir, argv[3] !== '--prod');
    daemonize();
  }
}

//==============================================================================
function stopDaemon() {
  if (pid) {
    isProcessRunning(pid, function(isRunning) {
      if (isRunning) {
        daemon.kill(pidFile, function(err) {
          console.log(err ?
            'Error stopping \033[32m' + daemonName + '\033[0m: ' + err :
            ('\033[32m' + daemonName + '\033[0m successfully stopped')
          );
          exec('rm ' + startTimeFile);
        });
      } else {
        console.log('\033[32m' + daemonName + '\033[0m could not be stopped because the daemon is not running yet');
      }
    });
  } else {
    console.log('\033[32m' + daemonName + '\033[0m could not be stopped because the daemon is not running yet');
  }  
}

//==============================================================================
function restartDaemon() {
  if (pid) {
    isProcessRunning(pid, function(isRunning) {
      if (isRunning) {
        daemon.kill(pidFile, function(err) {
          console.log(err ?
            'Error stopping \033[32m' + daemonName + '\033[0m: ' + err :
            ('\033[32m' + daemonName + '\033[0m successfully stopped')
          );
          startDaemon();
        });
      } else {
        startDaemon();
      }
    });
  } else {
    startDaemon();
  }
}

function statusDaemon() {
  if (pid) {
    isProcessRunning(pid, function(isRunning) {
      if (isRunning) {
        console.log(startTime ?
          '\033[32m' + daemonName + '\033[0m running since ' + new Date(startTime) :
          ('\033[32m' + daemonName + '\033[0m running')
        );
      } else {
        console.log('\033[32m' + daemonName + '\033[0m not running')
      }
    });
  } else {
    console.log('\033[32m' + daemonName + '\033[0m not running');
  }
}

//==============================================================================
function isProcessRunning(pid, callback) {
  exec('ps ' + pid + ' | grep -v PID', function(err, stdout) {
    callback(!err && stdout.indexOf(pid) !== -1);
  });
}

function daemonize() {
  console.log('\033[32m' + daemonName + '\033[0m is starting')
  daemon.daemonize(logFile, pidFile, function (err) {
    if (err) {
      sys.puts('Error starting \033[32m' + daemonName + '\033[0m: ' + err);
    } else {
      fs.writeFileSync(startTimeFile, Date.now());
    }
  });
}

//==============================================================================
if (process.argv[2]) {
  switch (process.argv[2]) {
    case 'start':
      startDaemon(); break;
    case 'stop':
      stopDaemon(); break;
    case 'restart':
      restartDaemon(); break;
    case 'status':
      statusDaemon(); break;
    default:
      console.log('Usage: ./' + daemonName + ' {start|stop|restart|status}');
  }  
} else {
  minimax(appDir, true);
}


